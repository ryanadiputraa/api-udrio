// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/ryanadiputraa/api-udrio/domain"
	mock "github.com/stretchr/testify/mock"
)

// ICartRepository is an autogenerated mock type for the ICartRepository type
type ICartRepository struct {
	mock.Mock
}

// CreateOrUpdate provides a mock function with given fields: ctx, cart
func (_m *ICartRepository) CreateOrUpdate(ctx context.Context, cart domain.Cart) error {
	ret := _m.Called(ctx, cart)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Cart) error); ok {
		r0 = rf(ctx, cart)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCartItemByProductID provides a mock function with given fields: ctx, cartID, productID
func (_m *ICartRepository) DeleteCartItemByProductID(ctx context.Context, cartID int, productID string) (domain.CartItem, error) {
	ret := _m.Called(ctx, cartID, productID)

	var r0 domain.CartItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) (domain.CartItem, error)); ok {
		return rf(ctx, cartID, productID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string) domain.CartItem); ok {
		r0 = rf(ctx, cartID, productID)
	} else {
		r0 = ret.Get(0).(domain.CartItem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = rf(ctx, cartID, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchCartByUserID provides a mock function with given fields: ctx, userID
func (_m *ICartRepository) FetchCartByUserID(ctx context.Context, userID string) ([]domain.CartDTO, error) {
	ret := _m.Called(ctx, userID)

	var r0 []domain.CartDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]domain.CartDTO, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []domain.CartDTO); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.CartDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserCartID provides a mock function with given fields: ctx, userID
func (_m *ICartRepository) FindUserCartID(ctx context.Context, userID string) (int, error) {
	ret := _m.Called(ctx, userID)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PatchUserCart provides a mock function with given fields: ctx, cartItem
func (_m *ICartRepository) PatchUserCart(ctx context.Context, cartItem domain.CartItem) error {
	ret := _m.Called(ctx, cartItem)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.CartItem) error); ok {
		r0 = rf(ctx, cartItem)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewICartRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewICartRepository creates a new instance of ICartRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewICartRepository(t mockConstructorTestingTNewICartRepository) *ICartRepository {
	mock := &ICartRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
